{"version":3,"file":"../../dist/bundle.js","mappings":"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","sources":["webpack://../wanakana/webpack/universalModuleDefinition","webpack://../wanakana/external umd \"wanakana\"","webpack://../wanakana/webpack/bootstrap","webpack://../wanakana/./loadCards.js","webpack://../wanakana/./imageList.js","webpack://../wanakana/./pullDown.js","webpack://../wanakana/./main.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"wanakana\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"wanakana\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"../wanakana\"] = factory(require(\"wanakana\"));\n\telse\n\t\troot[\"../wanakana\"] = factory(root[\"wanakana\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__968__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__968__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","//loadCards.js\r\n\r\nconst csvFilePath = 'src/data/TRETRA_Card.csv';\r\nconst cardRelPath = 'src/data/Card_Rel.csv'; // Card_Rel.csvのパス\r\n\r\n// Card_Rel.csvを読み込み、IDと値のマッピングを作成する関数\r\nasync function loadCardRel() {\r\n    try {\r\n        const response = await fetch(cardRelPath);\r\n        const data = await response.text();\r\n        const rows = data.split('\\n').slice(1); // ヘッダーを除外\r\n        const relMap = {};\r\n        rows.forEach(row => {\r\n            const [id, value] = row.split(',');\r\n            relMap[id] = value.trim(); // IDと対応する値をマッピング\r\n        });\r\n        return relMap;\r\n    } catch (error) {\r\n        console.error('Error loading CSV (Card_Rel.csv):', error);\r\n        return {};\r\n    }\r\n}\r\n\r\n// CSVを読み込んでカードリストを生成する関数\r\nasync function loadCards() {\r\n    try {\r\n        const cardRelMap = await loadCardRel(); // relマッピングを読み込み\r\n        const response = await fetch(csvFilePath);\r\n        const data = await response.text();\r\n        const rows = data.split('\\n').slice(1); // ヘッダー行を除外\r\n        const cards = rows.map(row => {\r\n            const cols = row.split(',');\r\n            const relValue = cardRelMap[cols[2]] || cols[2]; // rel IDを値に置き換え\r\n            return {\r\n                id: cols[0],\r\n                name: cols[1],\r\n                rel: relValue,\r\n                streng: cols[3],\r\n                strengAdd: cols[4],\r\n                tres: cols[5],\r\n                order: cols[6],\r\n                mainTxt: cols[7],\r\n                frebTxt: cols[8],\r\n                illustrator: cols[9]\r\n            };\r\n        });\r\n\r\n        // 発売時期の選択肢を生成\r\n        populateReleasePeriodOptions(cards);\r\n\r\n        return cards;\r\n    } catch (error) {\r\n        console.error('Error loading CSV (DataBase):', error);\r\n    }\r\n}\r\n\r\n// 発売時期の選択肢を生成する関数\r\nfunction populateReleasePeriodOptions(cards) {\r\n    const releasePeriodContainer = document.getElementById('release-period-container');\r\n    const uniquePeriods = [...new Set(cards.map(card => card.rel))];\r\n\r\n    uniquePeriods.forEach(period => {\r\n        const checkbox = document.createElement('input');\r\n        checkbox.type = 'checkbox';\r\n        checkbox.value = period;\r\n        checkbox.id = `release-period-${period}`;\r\n\r\n        // デフォルトでチェックされている状態とする\r\n        checkbox.checked = true;\r\n\r\n\r\n        const label = document.createElement('label');\r\n        label.htmlFor = checkbox.id;\r\n        if (parseFloat(period)){\r\n            label.textContent = ' 第' + period + '弾';\r\n        }else{\r\n            label.textContent = ' ' + period;\r\n        }\r\n        releasePeriodContainer.appendChild(checkbox);\r\n        releasePeriodContainer.appendChild(label);\r\n        releasePeriodContainer.appendChild(document.createElement('br'));\r\n    });\r\n}\r\n\r\n// 選択された発売時期に基づいてカードをフィルタリングする関数\r\nfunction filterCardsByReleasePeriod(cards) {\r\n    const checkboxes = document.querySelectorAll('#release-period-container input[type=\"checkbox\"]:checked');\r\n    const selectedPeriods = Array.from(checkboxes).map(checkbox => checkbox.value);\r\n    return cards.filter(card => selectedPeriods.includes(card.rel));\r\n}\r\n\r\nexport { loadCards, filterCardsByReleasePeriod };","// imageList.js\r\n\r\nexport async function getRandomImageUrls(count, maxDuplicates = 2, preselected = [], filteredCardIds = []) {\r\n  const basePath = 'src/data/img/card_list/'; // 画像が保存されているパス\r\n  const totalImages = filteredCardIds.length; // 画像の総数を計算\r\n\r\n  // maxDuplicates 許可される最大の重複回数\r\n\r\n  // 選択範囲が小さすぎる場合はエラーをスローする\r\n  if (totalImages * maxDuplicates < count) {\r\n    throw new Error(\"指定した範囲では十分な数のカードを選択できません。カードの範囲を見直してください。\");\r\n  }\r\n\r\n  const randomImageUrls = []; // 最初に選択されたカードを追加\r\n  const imageCounts = {}; // 画像ごとのカウントを追跡するオブジェクト\r\n  // 対応する画像形式の配列\r\n  const supportedFormats = ['png', 'jpg', 'jpeg', 'gif', 'webp'];\r\n  let p_select_idx = 0;\r\n  // 事前選択されたカードのカウントを初期化\r\n  for (const num of preselected) {\r\n    \r\n    let imageUrl = `${basePath}${num}.png`;\r\n    // 画像形式を検索\r\n    for (const format of supportedFormats) {\r\n      const possibleImageUrl = `${basePath}${preselected[p_select_idx]}.${format}`;\r\n      // 画像の存在確認 (非同期処理を同期的に待つ)\r\n      if (await imageExists(possibleImageUrl)) {\r\n        imageUrl = possibleImageUrl;\r\n        break;\r\n      }\r\n    }\r\n    if (!imageCounts[imageUrl]) {\r\n      imageCounts[imageUrl] = 0;\r\n    }\r\n\r\n    // 事前選択されたカードが重複上限に達していない場合のみ追加\r\n    if (imageCounts[imageUrl] < maxDuplicates) {\r\n      randomImageUrls.push(imageUrl);\r\n      imageCounts[imageUrl]++;\r\n    }\r\n    p_select_idx++;\r\n  }\r\n\r\n\r\n\r\n  // ランダムな画像URLを生成\r\n  while (randomImageUrls.length < count) {\r\n    const randomIndex = Math.floor(Math.random() * filteredCardIds.length);\r\n    let imageUrl = null;\r\n\r\n    // 画像形式ごとに存在確認を行う\r\n    for (const format of supportedFormats) {\r\n      const possibleImageUrl = `${basePath}${filteredCardIds[randomIndex]}.${format}`;\r\n\r\n      // 画像の存在確認 (非同期処理を同期的に待つ)\r\n      if (await imageExists(possibleImageUrl)) {\r\n        imageUrl = possibleImageUrl;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // 画像が見つからない場合は次のループへ\r\n    if (!imageUrl) {\r\n      continue;\r\n    }\r\n\r\n    // 画像が存在しない場合にエラー表示を回避する\r\n    if (!imageCounts[imageUrl]) {\r\n      imageCounts[imageUrl] = 0;\r\n    }\r\n\r\n    // 画像の重複が許可される最大回数を超えていないかチェック\r\n    if (imageCounts[imageUrl] < maxDuplicates) {\r\n      randomImageUrls.push(imageUrl);\r\n      imageCounts[imageUrl]++;\r\n    }\r\n  }\r\n  return randomImageUrls;\r\n}\r\n\r\nexport async function imageExists(url) {\r\n  try {\r\n      const response = await fetch(url, { method: 'HEAD' });\r\n      return response.ok; // ステータスが200-299であればtrueを返す\r\n  } catch (error) {\r\n      return false; // ネットワークエラーなどが発生した場合はfalseを返す\r\n  }\r\n}","// カードのプルダウンメニューを生成する関数\r\nfunction populateCardSelect(cards) {\r\n    const select = document.getElementById('card-select');\r\n    select.innerHTML = ''; // 既存のオプションをクリア\r\n\r\n    cards.forEach(card => {\r\n        const option = document.createElement('option');\r\n        option.value = card.id;\r\n\r\n        const paddedName = card.name\r\n\r\n        const releaseInfo = parseFloat(card.rel) ? `[${card.rel}弾]` : ` [${card.rel}]`; // 弾とその他を1文で分岐\r\n        option.textContent = releaseInfo + ' ' + paddedName;\r\n\r\n        select.appendChild(option); // メモ：appendChildでhtmlに新しい要素を追加できる\r\n    });\r\n}\r\n\r\nexport { populateCardSelect };","// main.js\r\n\r\n// 40種類の画像URLを配列に格納\r\nimport { loadCards, filterCardsByReleasePeriod } from './loadCards.js';\r\nimport { getRandomImageUrls, imageExists } from './imageList.js';\r\nimport { populateCardSelect } from './pullDown.js';\r\nimport * as wanakana from 'wanakana';\r\nlet deck_size = 10;\r\n\r\n// サポートする画像形式の配列\r\nconst supportedExtensions = ['png', 'jpg', 'jpeg'];\r\n\r\n\r\n// フィルタリングされたカードからランダム画像を取得する関数\r\nasync function getRandomImages(filteredCards) {\r\n    const preselectedCardsInput = document.getElementById('preselected-cards').value;\r\n    // カンマで区切られたカード番号を配列に変換\r\n    const preselectedCards = preselectedCardsInput.split(',').map(num => parseInt(num.trim(), 10)).filter(num => !isNaN(num));\r\n\r\n    try {\r\n        const filteredCardIds = filteredCards.map(card => parseInt(card.id, deck_size));\r\n        const imageUrls = await getRandomImageUrls(deck_size, 2, preselectedCards, filteredCardIds);\r\n\r\n        // カード番号で昇順にソート\r\n        imageUrls.sort((a, b) => {\r\n            const idA = parseInt(a.match(/(\\d+)\\./)[1], 10);\r\n            const idB = parseInt(b.match(/(\\d+)\\./)[1], 10);\r\n            return idA - idB;\r\n        });\r\n\r\n        // 画像URLとカードIDをマッピングする\r\n        return imageUrls.map(url => {\r\n            let cardId = null;\r\n            for (const ext of supportedExtensions) {\r\n                const match = url.match(new RegExp(`(\\\\d+)\\\\.${ext}$`)); // 画像URLからカードIDを抽出\r\n                if (match) {\r\n                    cardId = parseInt(match[1], 10);\r\n                    break;\r\n                }\r\n            }\r\n            if (cardId === null) {\r\n                console.error(`URL does not match any supported pattern: ${url}`);\r\n                return { url, card: null };\r\n            }\r\n            // すべてのカード（window.allCards）からカード情報を取得\r\n            const card = window.allCards.find(card => parseInt(card.id, 10) === cardId);\r\n            if (!card) {\r\n                console.error(`Card with ID ${cardId} not found in allCards.`);\r\n            }\r\n            return { url, card };\r\n        });\r\n    } catch (error) {\r\n        alert(error.message);\r\n        return [];\r\n    }\r\n}\r\n\r\n// 画像を表示する\r\nlet isDisplayingImages = false;\r\n\r\nasync function displayImages() {\r\n    if (isDisplayingImages) return; // すでに実行中ならば処理を中断\r\n    isDisplayingImages = true; // フラグを立てる\r\n\r\n    const filteredCards = window.filteredCards || [];\r\n    const images = await getRandomImages(filteredCards);\r\n    const container = document.getElementById(\"image-container\");\r\n    container.innerHTML = '';\r\n\r\n    if (filteredCards.length === 0) {\r\n        const defaultFilteredCards = filterCardsByReleasePeriod(window.allCards);\r\n        const defaultImages = await getRandomImages(defaultFilteredCards);\r\n\r\n        if (defaultImages.length > 0) {\r\n            for (const { url, card } of defaultImages) {\r\n                const div = document.createElement(\"div\"); // 画像とタイトルを囲む<div>を作成\r\n                div.classList.add(\"card-div\"); // カードごとのdivにクラスを追加\r\n                const img = document.createElement(\"img\");\r\n\r\n                try {\r\n                    const exists = await imageExists(url);\r\n                    img.src = exists ? url : './data/img/card_list/0.png'; // 見つからない場合は代替画像を使用\r\n                } catch (error) {\r\n                    console.error(`Failed to check image existence for ${url}: ${error}`);\r\n                    img.src = './data/img/card_list/0.png';\r\n                }\r\n                const title = document.createElement(\"p\"); // カードのタイトル要素を作成\r\n                title.textContent = card ? card.name : '不明なカード'; // カードが見つからない場合の処理\r\n\r\n                container.appendChild(div); // <div>をコンテナに追加\r\n                div.appendChild(title); // <div>にタイトルを追加\r\n                div.appendChild(img); // <div>に<img>を追加\r\n            }\r\n        } else {\r\n            alert('デフォルトで選択されたチェックボックスでも画像がありません。');\r\n        }\r\n    } else {\r\n        for (const { url, card } of images) {\r\n            const div = document.createElement(\"div\"); // 画像とタイトルを囲む<div>を作成\r\n            div.classList.add(\"card-div\"); // カードごとのdivにクラスを追加\r\n            const img = document.createElement(\"img\");\r\n\r\n            try {\r\n                const exists = await imageExists(url);\r\n                img.src = exists ? url : './data/img/card_list/0.png'; // 見つからない場合は代替画像を使用\r\n            } catch (error) {\r\n                console.error(`Failed to check image existence for ${url}: ${error}`);\r\n                img.src = './data/img/card_list/0.png';\r\n            }\r\n            const title = document.createElement(\"p\"); // カードのタイトル要素を作成\r\n            const cardRel = parseFloat(card.rel) ? `[${card.rel}弾] ` : ` [${card.rel}] `;\r\n            title.textContent = card ? cardRel + card.name : '不明なカード'; // カードが見つからない場合の処理\r\n\r\n            container.appendChild(div); // <div>をコンテナに追加\r\n            div.appendChild(title); // <div>にタイトルを追加\r\n            div.appendChild(img); // <div>に<img>を追加\r\n        }\r\n    }\r\n    isDisplayingImages = false; // 処理が完了したらフラグをリセット\r\n}\r\n\r\n// ページロード時に画像を表示 呼び出しが一度だけ行われるように変更\r\nwindow.onload = () => {\r\n    loadCards().then(cards => {\r\n        window.allCards = cards;\r\n        const filteredCards = filterCardsByReleasePeriod(cards); // デフォルトでフィルタリング\r\n        window.filteredCards = filteredCards;\r\n        populateCardSelect(cards); // プルダウンメニューにカードを追加\r\n        displayImages(); // 初期表示\r\n    }).catch(error => {\r\n        console.error('Error loading cards:', error);\r\n    });\r\n};\r\n\r\n// ボタンがクリックされたときに画像を変更\r\ndocument.getElementById('change-images-button').addEventListener('click', () => {\r\n    if (window.allCards) {\r\n        const filteredCards = filterCardsByReleasePeriod(window.allCards);\r\n        window.filteredCards = filteredCards;\r\n        displayImages();\r\n    }\r\n});\r\n\r\n// 検索ボックスの入力に基づいてプルダウンをフィルタリングする関数\r\ndocument.getElementById('card-search').addEventListener('keyup', function() {\r\n    const query = wanakana.toHiragana(this.value);// 入力をひらがなに変換\r\n    const filteredCards = window.allCards.filter(card => wanakana.toHiragana(card.name).includes(query)); // カード名もひらがなに変換して検索\r\n    populateCardSelect(filteredCards); // フィルタリングされたカードでプルダウンを更新\r\n});\r\n\r\n// ボタンがクリックされたときに選択されたカードを追加\r\ndocument.getElementById('add-selected-card-button').addEventListener('click', () => {\r\n    const select = document.getElementById('card-select');\r\n    const selectedCardId = select.value;\r\n    const preselectedInput = document.getElementById('preselected-cards');\r\n    const selectedCardsContainer = document.getElementById('selected-cards-container');\r\n    \r\n    // 既に選択済みかチェック\r\n    const selectedCardIds = preselectedInput.value.split(',').map(num => num.trim()); //選択済みの配列が入る\r\n    const count = selectedCardIds.filter(value => value === selectedCardId).length;\r\n    if (count < 2 && selectedCardIds.length < 10) {\r\n        // カード名を取得\r\n        const selectedCardOption = select.options[select.selectedIndex];\r\n        const cardName = selectedCardOption.text;\r\n\r\n        // カードを追加（preselectedInputに）\r\n        preselectedInput.value += preselectedInput.value ? `,${selectedCardId}` : selectedCardId;\r\n\r\n        // 表示するカードを作成（cardDivを新たに作成）\r\n        const cardDiv = document.createElement('div');\r\n        cardDiv.className = 'selected-card';\r\n        cardDiv.setAttribute('data-card-id', selectedCardId);\r\n        cardDiv.innerHTML = `\r\n            <span>${cardName}</span>\r\n            <button class=\"remove-card-button\"> － 削除</button>\r\n        `;\r\n        selectedCardsContainer.appendChild(cardDiv);\r\n\r\n        // 削除ボタンのイベントリスナー\r\n        cardDiv.querySelector('.remove-card-button').addEventListener('click', () => {\r\n            const cardId = cardDiv.getAttribute('data-card-id');\r\n            preselectedInput.value = preselectedInput.value.split(',').filter(id => id !== cardId).join(',');\r\n            selectedCardsContainer.removeChild(cardDiv);\r\n        });\r\n    }\r\n});\r\n\r\n// デバウンス関数の例\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function(...args) {\r\n        const context = this;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(context, args), wait);\r\n    };\r\n}\r\n\r\n// resizeイベントをデバウンスする\r\nwindow.addEventListener('resize', debounce(() => {\r\n    adjustLayout(); // レイアウトの調整のみ行う\r\n}, 300)); // 300ミリ秒の遅延\r\n\r\nconst modalOpenButton = document.getElementById('export-deck-button');\r\nmodalOpenButton.addEventListener('click', function() {\r\n    adjustModalSize(); // ウィンドウの高さに合わせてモーダルの高さを調整する関数\r\n    // モーダルを開く処理\r\n});\r\n\r\n// モーダルのサイズ調節用\r\nwindow.addEventListener('resize', function() {\r\n    adjustModalSize(); // ウィンドウの高さに合わせてモーダルの高さを調整する関数\r\n  });\r\n\r\n  function adjustModalSize(){\r\n    const modal = document.querySelector('.modal-content');\r\n    modal.style.maxHeight = window.innerHeight - 100 + 'px';\r\n    modal.style.margin = window.innerHeight/6 + 'px auto';\r\n}\r\n\r\ndocument.getElementById('modal-background').addEventListener('click', function() {\r\n    document.getElementById('deckModal').style.display = 'none'; // モーダルを閉じる\r\n});"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__968__","__webpack_module_cache__","filterCardsByReleasePeriod","cards","checkboxes","document","querySelectorAll","selectedPeriods","Array","from","map","checkbox","value","filter","card","includes","rel","async","imageExists","url","fetch","method","ok","error","populateCardSelect","select","getElementById","innerHTML","forEach","option","createElement","id","paddedName","name","releaseInfo","parseFloat","textContent","appendChild","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","supportedExtensions","getRandomImages","filteredCards","preselectedCards","split","num","parseInt","trim","isNaN","filteredCardIds","imageUrls","count","maxDuplicates","preselected","basePath","length","Error","randomImageUrls","imageCounts","supportedFormats","p_select_idx","imageUrl","format","possibleImageUrl","push","randomIndex","Math","floor","random","getRandomImageUrls","sort","a","b","match","cardId","ext","RegExp","console","window","allCards","find","alert","message","isDisplayingImages","displayImages","images","container","defaultFilteredCards","defaultImages","div","classList","add","img","exists","src","title","cardRel","adjustModalSize","modal","querySelector","style","maxHeight","innerHeight","margin","onload","cardRelMap","response","rows","text","slice","relMap","row","loadCardRel","cols","relValue","streng","strengAdd","tres","order","mainTxt","frebTxt","illustrator","releasePeriodContainer","Set","period","type","checked","label","htmlFor","populateReleasePeriodOptions","loadCards","then","catch","addEventListener","query","this","selectedCardId","preselectedInput","selectedCardsContainer","selectedCardIds","cardName","options","selectedIndex","cardDiv","className","setAttribute","getAttribute","join","removeChild","func","timeout","args","context","clearTimeout","setTimeout","apply","debounce","adjustLayout","display"],"sourceRoot":""}